{"ast":null,"code":"var _jsxFileName = \"/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js\";\nimport React from 'react';\nimport dragon from '../assests/dragon.png';\nimport player from '../assests/character.png';\n\nclass Core extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 10000,\n      score: 0,\n      letters: ['a', 'b', 'c'],\n      level: 1,\n      failed: false,\n      complete: false,\n      start: false,\n      page: 0\n    };\n  }\n\n  componentDidMount() {\n    let canvas = this.refs.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.listener();\n    this.startScreen();\n  }\n\n  listener() {\n    let self = this;\n    window.addEventListener(\"keypress\", function (event) {\n      // Player win level\n      if (self.state.letters.length === 1) {\n        self.setState({\n          level: self.state.level + 1,\n          complete: true\n        });\n        self.refreshScreen();\n        self.ctx.font = \"40px Courier\";\n        self.ctx.fillStyle = \"red\";\n        self.ctx.textAlign = \"center\";\n        self.ctx.fillText('GAME OVER', 50, 20);\n      } // Checks key press and updates score\n\n\n      if (self.state.letters.includes(event.key) && self.state.failed === false) {\n        let index = self.state.letters.indexOf(event.key);\n        self.state.letters.splice(index, 1);\n        self.setState({\n          score: self.state.score + 10\n        });\n        self.refreshScreen();\n      } else if (!self.state.letters.includes(event.key) && self.state.complete === false && event.key !== '.' && event.code !== 'Space') {\n        console.log(event.key);\n        self.setState({\n          score: self.state.score - 10\n        });\n        self.refreshScreen();\n      } // Continues to text round\n\n\n      if (event.key === '.' && self.state.complete === true && self.state.failed === false) {\n        self.state.complete = false;\n        clearInterval(self.timerLoop);\n        self.startTimer();\n        self.update_letter();\n        self.refreshScreen();\n      } // Game screen start\n\n\n      if (event.code === 'Space' && self.state.page === 0) {\n        self.setState({\n          start: true,\n          page: 1\n        });\n        self.clearScreen();\n        self.gameScreen();\n        self.startTimer();\n      }\n    });\n  }\n\n  clearScreen() {\n    this.ctx.clearRect(0, 0, 1024, 600);\n  }\n\n  refreshScreen() {\n    this.clearScreen();\n    this.gameScreen();\n  }\n\n  startScreen() {\n    this.ctx.font = \"40px Courier\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText('KEYBOARD HERO', 512, 200);\n    this.ctx.fillStyle = \"blue\";\n    this.ctx.fillText('PRESS SPACE TO PLAY', 512, 300);\n  }\n\n  gameScreen() {\n    this.scoreAssest();\n    this.ctx.strokeStyle = \"#ffffff\";\n    this.ctx.lineWidth = 10;\n    this.ctx.rect(0, 505, 1024, 100);\n    this.ctx.stroke();\n    this.spawnLetters();\n    let dragon = this.refs.dragon;\n    this.ctx.drawImage(dragon, 680, 100, 500, 400);\n    let player = this.refs.player;\n    this.ctx.drawImage(player, 225, 400, 125, 100);\n  }\n\n  scoreAssest() {\n    this.ctx.font = \"20px Courier\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.textAlign = \"right\";\n    this.ctx.fillText(\"Score: \".concat(this.state.score), 1018, 30);\n    this.ctx.textAlign = \"left\";\n    this.ctx.fillText(\"Level: \".concat(this.state.level), 10, 30);\n  }\n\n  spawnLetters() {\n    let self = this;\n    let counter = 100;\n    this.state.letters.forEach(function (item, index) {\n      let x = Math.floor(Math.random() * (500 - 10 + 1)) + 10;\n      let y = Math.floor(Math.random() * (500 - 10 + 1)) + 10;\n      counter += 50;\n      self.ctx.beginPath();\n      self.ctx.fillStyle = \"rgb(200,0,0)\";\n      self.ctx.arc(x, y, 32 / 2, 0, 2 * Math.PI, false);\n      self.ctx.fill();\n      self.ctx.fillStyle = 'white';\n      self.ctx.textAlign = 'center';\n      self.ctx.font = \"30px Courier\";\n      self.ctx.fillText(item, x, y + 6);\n    });\n  }\n\n  startTimer() {\n    this.timerLoop = setInterval(() => this.checkStatus(), 10000);\n  }\n\n  checkStatus() {\n    if (this.state.letters.length !== 0) {\n      this.setState({\n        failed: true\n      });\n      clearInterval(this.timerLoop);\n    }\n  }\n\n  update_letter() {\n    const keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let next_letters = [];\n    let i = 0;\n    let lettersAmount = {\n      1: 3,\n      2: 3,\n      3: 4,\n      4: 5,\n      5: 5,\n      6: 6,\n      7: 9,\n      8: 10,\n      9: 10,\n      10: 12\n    };\n\n    for (i = 0; i < lettersAmount[this.state.level]; i++) {\n      const next_letter = keys[Math.floor(Math.random() * keys.length)];\n      next_letters.push(next_letter);\n    }\n\n    this.setState({\n      letters: next_letters\n    });\n  }\n\n  render() {\n    let failed;\n    let game;\n    let continue_;\n\n    if (this.state.failed) {\n      this.clearScreen();\n      this.scoreAssest();\n      this.ctx.font = \"40px Courier\";\n      this.ctx.fillStyle = \"red\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillText('GAME OVER', 512, 300);\n    } else if (this.state.complete) {\n      console.log('please work');\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 1024,\n      height: 600,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"dragon\",\n      src: dragon,\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"player\",\n      src: player,\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Core;","map":{"version":3,"sources":["/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js"],"names":["React","dragon","player","Core","Component","constructor","props","state","timer","score","letters","level","failed","complete","start","page","componentDidMount","canvas","refs","ctx","getContext","listener","startScreen","self","window","addEventListener","event","length","setState","refreshScreen","font","fillStyle","textAlign","fillText","includes","key","index","indexOf","splice","code","console","log","clearInterval","timerLoop","startTimer","update_letter","clearScreen","gameScreen","clearRect","scoreAssest","strokeStyle","lineWidth","rect","stroke","spawnLetters","drawImage","counter","forEach","item","x","Math","floor","random","y","beginPath","arc","PI","fill","setInterval","checkStatus","keys","next_letters","i","lettersAmount","next_letter","push","render","game","continue_","display"],"mappings":"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","sourcesContent":["import React from 'react'\nimport dragon from '../assests/dragon.png'\nimport player from '../assests/character.png'\n\nclass Core extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 10000,\n            score: 0,\n            letters: ['a', 'b', 'c'],\n            level: 1,\n            failed: false,\n            complete: false,\n            start: false,\n            page: 0\n        }\n    }\n\n    componentDidMount() {\n        let canvas = this.refs.canvas\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.listener()\n        this.startScreen()\n    }\n\n    listener() {\n        let self = this\n\n        window.addEventListener(\"keypress\", function (event) {\n\n            // Player win level\n            if (self.state.letters.length === 1) {\n                self.setState({\n                    level: self.state.level + 1,\n                    complete: true\n                })\n\n                self.refreshScreen()\n                self.ctx.font = \"40px Courier\"\n                self.ctx.fillStyle = \"red\";\n                self.ctx.textAlign = \"center\";\n                self.ctx.fillText('GAME OVER', 50, 20)\n            }\n\n            // Checks key press and updates score\n            if (self.state.letters.includes(event.key) && self.state.failed === false) {\n\n                let index = self.state.letters.indexOf(event.key)\n                self.state.letters.splice(index, 1)\n\n                self.setState({\n                    score: self.state.score + 10\n                })\n\n                self.refreshScreen()\n\n            } else if (!self.state.letters.includes(event.key) && self.state.complete === false && event.key !== '.' && event.code !== 'Space') {\n                console.log(event.key)\n                self.setState({\n                    score: self.state.score - 10\n                })\n\n                self.refreshScreen()\n            }\n\n            // Continues to text round\n            if (event.key === '.' && self.state.complete === true && self.state.failed === false) {\n                self.state.complete = false\n\n                clearInterval(self.timerLoop)\n                self.startTimer()\n                self.update_letter()\n                self.refreshScreen()\n            }\n\n            // Game screen start\n            if (event.code === 'Space' && self.state.page === 0) {\n                self.setState({\n                    start: true,\n                    page: 1\n                })\n\n                self.clearScreen()\n                self.gameScreen()\n                self.startTimer()\n            }\n        })\n    }\n\n    clearScreen() {\n        this.ctx.clearRect(0, 0, 1024, 600);\n    }\n\n    refreshScreen() {\n        this.clearScreen()\n        this.gameScreen()\n    }\n\n    startScreen() {\n        this.ctx.font = \"40px Courier\"\n        this.ctx.fillStyle = \"red\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText('KEYBOARD HERO', 512, 200)\n\n        this.ctx.fillStyle = \"blue\";\n        this.ctx.fillText('PRESS SPACE TO PLAY', 512, 300)\n    }\n\n    gameScreen() {\n        this.scoreAssest()\n\n        this.ctx.strokeStyle = \"#ffffff\"\n        this.ctx.lineWidth = 10\n        this.ctx.rect(0, 505, 1024, 100);\n        this.ctx.stroke();\n\n        this.spawnLetters()\n\n        let dragon = this.refs.dragon\n        this.ctx.drawImage(dragon, 680, 100, 500, 400);\n\n        let player = this.refs.player\n        this.ctx.drawImage(player, 225, 400, 125, 100);\n    }\n\n    scoreAssest() {\n        this.ctx.font = \"20px Courier\"\n        this.ctx.fillStyle = \"white\"\n        this.ctx.textAlign = \"right\"\n        this.ctx.fillText(`Score: ${this.state.score}`, 1018, 30)\n        this.ctx.textAlign = \"left\"\n        this.ctx.fillText(`Level: ${this.state.level}`, 10, 30)\n    }\n\n    spawnLetters() {\n        let self = this\n\n        let counter = 100\n        this.state.letters.forEach(function (item, index) {\n            let x = Math.floor(Math.random() * (500 - 10 + 1)) + 10\n            let y = Math.floor(Math.random() * (500 - 10 + 1)) + 10\n\n            counter+=50\n\n            self.ctx.beginPath();\n            self.ctx.fillStyle = \"rgb(200,0,0)\";\n            self.ctx.arc(x, y, 32/2, 0, 2 * Math.PI, false);\n            self.ctx.fill();\n\n            self.ctx.fillStyle = 'white';\n            self.ctx.textAlign = 'center';\n            self.ctx.font = \"30px Courier\"\n            self.ctx.fillText(item, x, y+6);\n        });\n\n    }\n\n    startTimer() {\n        this.timerLoop = setInterval(\n            () => this.checkStatus(),\n            10000\n        )\n    }\n\n    checkStatus() {\n        if (this.state.letters.length !== 0) {\n            this.setState({\n                failed: true\n            })\n\n            clearInterval(this.timerLoop)\n        }\n    }\n\n    update_letter() {\n        const keys = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\n        let next_letters = []\n\n        let i = 0\n\n        let lettersAmount = {\n            1: 3,\n            2: 3,\n            3: 4,\n            4: 5,\n            5: 5,\n            6: 6,\n            7: 9,\n            8: 10,\n            9: 10,\n            10: 12\n        }\n\n        for (i = 0; i < lettersAmount[this.state.level]; i++) {\n            const next_letter = keys[Math.floor(Math.random() * keys.length)]\n            next_letters.push(next_letter)\n        }\n\n        this.setState({\n            letters: next_letters\n        });\n    }\n\n    render() {\n        let failed;\n        let game;\n        let continue_;\n\n        if (this.state.failed) {\n            this.clearScreen()\n            this.scoreAssest()\n\n            this.ctx.font = \"40px Courier\"\n            this.ctx.fillStyle = \"red\";\n            this.ctx.textAlign = \"center\";\n            this.ctx.fillText('GAME OVER', 512, 300)\n        } else if (this.state.complete) {\n            console.log('please work')\n        }\n\n        return (\n            <div>\n                <canvas ref=\"canvas\" width={1024} height={600} />\n                <img ref=\"dragon\" src={dragon} style={{display: 'none'}}/>\n                <img ref=\"player\" src={player} style={{display: 'none'}}/>\n            </div>\n        )\n    }\n}\n\nexport default Core"]},"metadata":{},"sourceType":"module"}