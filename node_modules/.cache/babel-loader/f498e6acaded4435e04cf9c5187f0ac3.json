{"ast":null,"code":"var _jsxFileName = \"/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js\";\nimport React from 'react';\nimport GameOver from './GameOver';\nimport GameScreen from \"./GameScreen\";\n\nclass Core extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 20000,\n      score: 0,\n      letters: ['a', 'b', 'c'],\n      level: 1,\n      failed: false,\n      complete: false,\n      start: false,\n      page: 0\n    };\n  }\n\n  componentDidMount() {\n    let canvas = this.refs.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.listener();\n    this.startScreen();\n  }\n\n  listener() {\n    let self = this;\n    window.addEventListener(\"keypress\", function (event) {\n      // Player win level\n      if (self.state.letters.length === 1) {\n        self.setState({\n          level: self.state.level + 1,\n          complete: true,\n          timer: self.state.timer - 2000\n        });\n        self.refreshScreen();\n      } // Checks key press and updates score\n\n\n      if (self.state.letters.includes(event.key)) {\n        let index = self.state.letters.indexOf(event.key);\n        self.state.letters.splice(index, 1);\n        self.setState({\n          score: self.state.score + 10\n        });\n        self.refreshScreen();\n      } else if (!self.state.letters.includes(event.key) && self.state.complete === false) {\n        self.setState({\n          score: self.state.score - 10\n        });\n        self.refreshScreen();\n      } // Continues to text round\n\n\n      if (event.key === '.') {\n        self.state.complete = false;\n        let newTime = self.state.timer - 2000;\n        self.setState({\n          timer: newTime\n        });\n        self.refreshScreen();\n        self.startTimer(newTime);\n        self.update_letter();\n      } // Game screen start\n\n\n      if (event.code === 'Space' && self.state.page === 0) {\n        self.setState({\n          start: true,\n          page: 1\n        });\n        self.clearScreen();\n        self.gameScreen();\n        self.startTimer(self.state.timer);\n      }\n    });\n  }\n\n  clearScreen() {\n    this.ctx.clearRect(0, 0, 1024, 600);\n  }\n\n  refreshScreen() {\n    this.clearScreen();\n    this.gameScreen();\n  }\n\n  startScreen() {\n    this.ctx.font = \"40px Courier\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText('KEYBOARD HERO', 512, 200);\n    this.ctx.fillStyle = \"blue\";\n    this.ctx.fillText('PRESS SPACE TO PLAY', 512, 300);\n  }\n\n  gameScreen() {\n    this.scoreAssest();\n    this.ctx.strokeStyle = \"#ffffff\";\n    this.ctx.lineWidth = 1;\n    this.ctx.moveTo(0, 500);\n    this.ctx.lineTo(1024, 500);\n    this.ctx.stroke();\n    this.spawnLetters();\n  }\n\n  scoreAssest() {\n    this.ctx.font = \"20px Courier\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.textAlign = \"right\";\n    this.ctx.fillText(\"Score: \".concat(this.state.score), 1018, 30);\n  }\n\n  spawnLetters() {\n    let self = this;\n    this.state.letters.forEach(function (item, index) {\n      let pos = Math.floor(Math.random() * 750) + 650;\n      self.ctx.fillText(\"L\", pos, 30);\n    });\n  }\n\n  startTimer(time) {\n    this.timerLoop = setInterval(() => this.checkStatus(), time);\n  }\n\n  checkStatus() {\n    if (this.state.letters.length !== 0) {\n      this.setState({\n        failed: true\n      });\n      clearInterval(this.timerLoop);\n    }\n  }\n\n  update_letter() {\n    const keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let next_letters = [];\n    let i = 0;\n\n    for (i = 0; i < 3; i++) {\n      const next_letter = keys[Math.floor(Math.random() * keys.length)];\n      next_letters.push(next_letter);\n    }\n\n    this.setState({\n      letters: next_letters\n    });\n  }\n\n  render() {\n    let failed;\n    let game;\n    let continue_;\n\n    if (this.state.failed) {\n      failed = React.createElement(GameOver, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      });\n    } else if (this.state.complete) {\n      continue_ = React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Press \\\"space\\\" to continue!\");\n    } else if (this.state.start) {\n      game = React.createElement(GameScreen, {\n        props: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Kill the dragon!\"), game, continue_, failed, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Time: \", this.state.timer), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 1024,\n      height: 600,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Core;","map":{"version":3,"sources":["/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js"],"names":["React","GameOver","GameScreen","Core","Component","constructor","props","state","timer","score","letters","level","failed","complete","start","page","componentDidMount","canvas","refs","ctx","getContext","listener","startScreen","self","window","addEventListener","event","length","setState","refreshScreen","includes","key","index","indexOf","splice","newTime","startTimer","update_letter","code","clearScreen","gameScreen","clearRect","font","fillStyle","textAlign","fillText","scoreAssest","strokeStyle","lineWidth","moveTo","lineTo","stroke","spawnLetters","forEach","item","pos","Math","floor","random","time","timerLoop","setInterval","checkStatus","clearInterval","keys","next_letters","i","next_letter","push","render","game","continue_"],"mappings":"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","sourcesContent":["import React from 'react'\nimport GameOver from './GameOver'\nimport GameScreen from \"./GameScreen\";\n\nclass Core extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 20000,\n            score: 0,\n            letters: ['a', 'b', 'c'],\n            level: 1,\n            failed: false,\n            complete: false,\n            start: false,\n            page: 0\n        }\n    }\n\n    componentDidMount() {\n        let canvas = this.refs.canvas\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.listener()\n        this.startScreen()\n    }\n\n    listener() {\n        let self = this\n\n        window.addEventListener(\"keypress\", function (event) {\n\n            // Player win level\n            if (self.state.letters.length === 1) {\n                self.setState({\n                    level: self.state.level + 1,\n                    complete: true,\n                    timer: self.state.timer - 2000\n                })\n                self.refreshScreen()\n            }\n\n            // Checks key press and updates score\n            if (self.state.letters.includes(event.key)) {\n\n                let index = self.state.letters.indexOf(event.key)\n                self.state.letters.splice(index, 1)\n\n                self.setState({\n                    score: self.state.score + 10\n                })\n\n                self.refreshScreen()\n\n            } else if (!self.state.letters.includes(event.key) && self.state.complete === false ) {\n                self.setState({\n                    score: self.state.score - 10\n                })\n\n                self.refreshScreen()\n            }\n\n            // Continues to text round\n            if (event.key === '.') {\n                self.state.complete = false\n\n                let newTime = self.state.timer - 2000\n                self.setState({\n                    timer: newTime\n                })\n\n                self.refreshScreen()\n                self.startTimer(newTime)\n                self.update_letter()\n            }\n\n            // Game screen start\n            if (event.code === 'Space' && self.state.page === 0) {\n                self.setState({\n                    start: true,\n                    page: 1\n                })\n\n                self.clearScreen()\n                self.gameScreen()\n                self.startTimer(self.state.timer)\n            }\n        })\n    }\n\n    clearScreen() {\n        this.ctx.clearRect(0, 0, 1024, 600);\n    }\n\n    refreshScreen() {\n        this.clearScreen()\n        this.gameScreen()\n    }\n\n    startScreen() {\n        this.ctx.font = \"40px Courier\"\n        this.ctx.fillStyle = \"red\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText('KEYBOARD HERO', 512, 200)\n\n        this.ctx.fillStyle = \"blue\";\n        this.ctx.fillText('PRESS SPACE TO PLAY', 512, 300)\n    }\n\n    gameScreen() {\n        this.scoreAssest()\n\n        this.ctx.strokeStyle = \"#ffffff\"\n        this.ctx.lineWidth = 1\n        this.ctx.moveTo(0, 500)\n        this.ctx.lineTo(1024, 500)\n        this.ctx.stroke()\n\n        this.spawnLetters()\n    }\n\n    scoreAssest() {\n        this.ctx.font = \"20px Courier\"\n        this.ctx.fillStyle = \"white\";\n        this.ctx.textAlign = \"right\";\n        this.ctx.fillText(`Score: ${this.state.score}`, 1018, 30)\n    }\n\n    spawnLetters() {\n        let self = this\n\n        this.state.letters.forEach(function (item, index) {\n            let pos = Math.floor(Math.random() * 750) + 650\n            self.ctx.fillText(`L`, pos, 30)\n        });\n\n    }\n\n    startTimer(time) {\n        this.timerLoop = setInterval(\n            () => this.checkStatus(),\n            time\n        )\n    }\n\n    checkStatus() {\n        if (this.state.letters.length !== 0) {\n            this.setState({\n                failed: true\n            })\n\n            clearInterval(this.timerLoop)\n        }\n    }\n\n    update_letter() {\n        const keys = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\n        let next_letters = []\n\n        let i = 0\n        for (i = 0; i < 3; i++) {\n            const next_letter = keys[Math.floor(Math.random() * keys.length)]\n            next_letters.push(next_letter)\n        }\n\n        this.setState({\n            letters: next_letters\n        });\n    }\n\n    render() {\n        let failed;\n        let game;\n        let continue_;\n\n        if (this.state.failed) {\n            failed = <GameOver />;\n        } else if (this.state.complete) {\n            continue_ = <h1>Press \"space\" to continue!</h1>\n        } else if (this.state.start){\n            game = <GameScreen props={this.state}/>\n        }\n\n        return (\n            <div>\n                <h1>Kill the dragon!</h1>\n\n                {game}\n                {continue_}\n                {failed}\n\n                <h3>Time: {this.state.timer}</h3>\n\n                <canvas ref=\"canvas\" width={1024} height={600} />\n\n            </div>\n        )\n    }\n}\n\nexport default Core"]},"metadata":{},"sourceType":"module"}