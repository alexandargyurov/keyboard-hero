{"ast":null,"code":"var _jsxFileName = \"/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js\";\nimport React from 'react';\nimport GameOver from './GameOver';\nimport GameScreen from \"./GameScreen\";\n\nclass Core extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 10000,\n      score: 0,\n      letters: ['a', 'b', 'c'],\n      level: 1,\n      failed: false,\n      complete: false\n    };\n  }\n\n  componentDidMount() {\n    //this.startTimer()\n    this.listener();\n  }\n\n  listener() {\n    let self = this;\n    window.addEventListener(\"keypress\", function (event) {\n      console.log(event.code);\n\n      if (self.state.letters.length === 1) {\n        self.setState({\n          level: self.state.level + 1,\n          complete: true,\n          timer: self.state.timer - 2000\n        });\n\n        if (event.code == 'Space') {\n          self.update_letter();\n        }\n      }\n\n      if (self.state.letters.includes(event.key)) {\n        let index = self.state.letters.indexOf(event.key);\n        self.state.letters.splice(index, 1);\n        self.setState({\n          score: self.state.score + 10\n        });\n      } else if (!self.state.letters.includes(event.key) && self.state.complete === false) {\n        self.setState({\n          score: self.state.score - 10\n        });\n      }\n    });\n  }\n\n  startTimer() {\n    this.timerLoop = setInterval(() => this.checkTimer(), this.state.timer);\n    this.lettersLoop = setInterval(() => this.update_letter(), this.state.timer);\n  }\n\n  checkTimer() {\n    let self = this;\n\n    if (self.state.letters.length !== 0) {\n      self.setState({\n        failed: true\n      });\n      clearInterval(this.lettersLoop);\n      clearInterval(this.timerLoop);\n    } else {\n      self.setState({\n        complete: false\n      });\n    }\n  }\n\n  update_letter() {\n    const keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let next_letters = [];\n    let i = 0;\n\n    for (i = 0; i < 3; i++) {\n      const next_letter = keys[Math.floor(Math.random() * keys.length)];\n      next_letters.push(next_letter);\n    }\n\n    this.setState({\n      letters: next_letters\n    });\n  }\n\n  render() {\n    let failed;\n    let game;\n\n    if (this.state.failed) {\n      failed = React.createElement(GameOver, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    } else {\n      game = React.createElement(GameScreen, {\n        props: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Kill the dragon!\"), game, failed);\n  }\n\n}\n\nexport default Core;","map":{"version":3,"sources":["/Users/alexgyurov/Development/final-project-frontend/src/components/Core.js"],"names":["React","GameOver","GameScreen","Core","Component","constructor","props","state","timer","score","letters","level","failed","complete","componentDidMount","listener","self","window","addEventListener","event","console","log","code","length","setState","update_letter","includes","key","index","indexOf","splice","startTimer","timerLoop","setInterval","checkTimer","lettersLoop","clearInterval","keys","next_letters","i","next_letter","Math","floor","random","push","render","game"],"mappings":"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","sourcesContent":["import React from 'react'\nimport GameOver from './GameOver'\nimport GameScreen from \"./GameScreen\";\n\nclass Core extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 10000,\n            score: 0,\n            letters: ['a', 'b', 'c'],\n            level: 1,\n            failed: false,\n            complete: false\n\n        };\n    }\n\n    componentDidMount() {\n        //this.startTimer()\n        this.listener()\n    }\n\n\n    listener() {\n        let self = this\n\n        window.addEventListener(\"keypress\", function (event) {\n\n            console.log(event.code)\n\n            if (self.state.letters.length === 1) {\n                self.setState({\n                    level: self.state.level + 1,\n                    complete: true,\n                    timer: self.state.timer - 2000\n                });\n\n\n                if (event.code == 'Space') {\n                    self.update_letter()\n                }\n            }\n\n            if (self.state.letters.includes(event.key)) {\n\n                let index = self.state.letters.indexOf(event.key)\n                self.state.letters.splice(index, 1)\n\n                self.setState({\n                    score: self.state.score + 10\n                });\n            } else if (!self.state.letters.includes(event.key) && self.state.complete === false ) {\n                self.setState({\n                    score: self.state.score - 10\n                });\n            }\n        })\n    }\n\n    startTimer() {\n        this.timerLoop = setInterval(\n            () => this.checkTimer(),\n            this.state.timer\n        );\n\n        this.lettersLoop = setInterval(\n            () => this.update_letter(),\n            this.state.timer\n        );\n    }\n\n    checkTimer() {\n        let self = this\n\n        if (self.state.letters.length !== 0) {\n            self.setState({\n                failed: true\n            });\n\n            clearInterval(this.lettersLoop)\n            clearInterval(this.timerLoop)\n        } else {\n            self.setState({\n                complete: false\n            });\n        }\n\n\n    }\n\n    update_letter() {\n        const keys = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\n        let next_letters = []\n\n        let i = 0\n        for (i = 0; i < 3; i++) {\n            const next_letter = keys[Math.floor(Math.random() * keys.length)]\n            next_letters.push(next_letter)\n        }\n\n        this.setState({\n            letters: next_letters\n        });\n    }\n\n    render() {\n        let failed;\n        let game;\n\n        if (this.state.failed) {\n            failed = <GameOver />;\n        } else {\n            game = <GameScreen props={this.state}/>\n\n        }\n\n        return (\n            <div>\n                <h1>Kill the dragon!</h1>\n\n                {game}\n\n                {failed}\n            </div>\n        )\n    }\n}\n\nexport default Core"]},"metadata":{},"sourceType":"module"}